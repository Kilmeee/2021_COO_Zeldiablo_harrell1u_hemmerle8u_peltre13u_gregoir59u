@startuml
'''classes

class DessinZeldiablo {
-TAILLE:int
+DessinZeldiablo(JeuZeldiablo)
+dessiner(BufferedImage)
}

class Labyrinthe{
+TAILLE_CASE : int
-tailleX : int
-tailleY : int
+getTailleX():int
+getTailleY():int
+getCarte():Placeable[][]
}

class Personnage{
+Personnage(int,int)
+Personnage()
+dessiner(Graphics2D, int, int)
}

abstract class Entite {
#x :int
#y :int
#pv : int
+Entite()
+Entite(int,int)
+deplacer(Commande)
+getX():int
+getY():int
+ajouterLab(Labyrinthe):boolean
}

class MainZeldiablo {
+main(String[])
}

class JeuZeldiablo{
+JeuZeldiablo()
+evoluer(Commande)
+etreFini():boolean
+getMonstres():List<Monstre>
+getLabyrinthe():Labyrinthe
}

interface DessinJeu{
+dessiner(BufferedImage)
}

interface Jeu{
+evoluer(Commande)
+etreFini():boolean
}

abstract class Case{

}

class CaseVide{

}

class Mur{
+dessiner(Graphics2D,int,int)
}

class Piege{
+declencher()
+dessine(Graphics2D,int,int)
}

class Trigger{
+declencher()
+dessine(Graphics2D,int,int)
}

abstract class Placeable{
+setup(JeuZeldiablo, Labyrinthe)
+declencher()
+isCaseVide():boolean
+dessiner(Graphics2D, int, int)
}

abstract class Traversable{
isCaseVide():boolean
}

abstract class Declanchable{
#trouver : boolean
+Dechanchable()
+isTrouver():boolean
}



class Monstre {
+Monstre(int,int)
+Monstre()
+ajouterLab(Labyrinthe):boolean
+dessiner(Graphics2D, int, int)
}

'''relations
Entite <|-- Monstre
Entite <|-- Personnage
Case <|-- Mur
Plaecable <|-- Case
Traversable <|-- CaseVide
Declanchable <|-- Piege
Declanchable <|-- Trigger
Placeable <|-- Entite
Traversable <|-- Declanchable
Case <|-- Traversable


Jeu <|.. JeuZeldiablo
DessinJeu <|.. DessinZeldiablo

Monstre "*" --> "*" Labyrinthe  : -monstres
Entite "1" --> "*" Labyrinthe  : -lab
JeuZeldiablo "1" --> "1" Labyrinthe  : -labyrinthe
JeuZeldiablo "1" --> "*" Personnage  : -personnage
JeuZeldiablo "1" --> "1" Monstre : - <List>monstres
DessinZeldiablo "1" --> "*" JeuZeldiablo  : dessinZeldiablo
@enduml